<?php

namespace App\EventSubscriber;

use App\Repository\DomainRepository;
use App\Service\AccessTokenService;
use App\Service\DeleteDomainService;
use Psr\Log\LoggerInterface;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Symfony\Component\Messenger\Event\WorkerMessageHandledEvent;
use function PHPUnit\Framework\isEmpty;

class AutoDeleteSubscriber implements EventSubscriberInterface
{
    public function __construct(
        private LoggerInterface $logger,
        private AccessTokenService $accessTokenService,
        private DomainRepository $domRepo,
        private DeleteDomainService $deleteDomainService,
    ) {
    }

    public static function getSubscribedEvents()
    {
        return [
            WorkerMessageHandledEvent::class => 'onWorkerMessageHandled',
        ];
    }

    public function onWorkerMessageHandled(WorkerMessageHandledEvent $event): void
    {
        $this->logger->info('PASSAGE PAR SUBSCRIBER');

        $domains = $this->domRepo->getIsToSuppress();

        // If there is no Domain to suppress
        if (isEmpty($domains)) {
            $this->logger->info('No domains to suppress');
            return;
        }

        $accessToken = $this->accessTokenService->getAccessToken();
        // Suppress Domain then log a message to the console
        foreach ($domains as $domain) {
            $flash = $this->deleteDomainService->deleteDomain($domain->getName(), $accessToken);
            $this->logger->info($flash['type'] . ' ' . $domain->getName() . ' ' . $flash['message']);
        }

        $this->logger->info('Fin AutoDelete');
    }
}
